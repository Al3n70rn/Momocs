
OutCoe <- function(coe.matrix, fac=data.frame(), method){
  if (missing(method)) stop("a method must be provided to Coe")
  OutCoe <- list(coe=coe.matrix, fac=fac, method=method)
  class(OutCoe) <- "OutCoe"
  return(OutCoe)}

# The print method for Out objects
print.OutCoe <- function(OutCoe){
  p <- pmatch(OutCoe$method, c("eFourier", "rFourier", "tFourier"))
  met <- switch(p, "elliptical Fourier", "radii variation", "tangent angle")
  ### Header
  cat("An OutCoe object [", met, "analysis ] (see ?OutCoe) \n")
  cat(rep("-", 20),"\n", sep="")
  coo.nb  <- nrow(OutCoe$coe) #nrow method ?
  harm.nb <- ncol(OutCoe$coe)/ifelse(p == 1, 4, 2)
  # number of outlines and harmonics
  cat(" -", coo.nb, "outlines described\n")
  cat(" -", coo.nb, "harmonics\n")
  # lets show some of them for a quick inspection
  cat(" - Some harmonic coefficients from random outlines in $coe: \n")
  row.eg <- sort(sample(coo.nb, 5, replace=FALSE))
  col.eg <- coeff.sel(retain=ifelse(harm.nb > 3, 3, harm.nb), drop=0,
                      nb.h=harm.nb, cph=ifelse(p==1, 4, 2))
  print(signif(OutCoe$coe[row.eg, col.eg], 3))
  cat("etc.\n")
  # number of grouping factors
  df <- OutCoe$fac
  nf <- ncol(df)
  if (nf==0) {
    cat(" - No groups defined\n")
  } else {
    cat(" -", nf, "grouping factor(s) defined:\n")
    for (i in 1:nf) {
      cat("     ", colnames(df)[i], ": ", levels(df[, i]),"\n")}}}

pca <- function(x, ...){UseMethod("pca")}
pca.OutCoe <- function(OutCoe, center=TRUE, scale=FALSE, scannf=FALSE, nf=5){
  pca <- dudi.pca(df=as.data.frame(OutCoe$coe),
                  center= center,  scale = scale,
                  scannf = scannf, nf = nf)
  pca$coe      <- OutCoe$coe
  pca$mean.shp <- apply(OutCoe$coe, 2, mean)
  pca$fac      <- OutCoe$fac
  pca$method   <- OutCoe$method
  class(pca)   <- c("OutPca", class(pca))
  return(pca)}


plot.OutPca <- function(x, xax=1, yax=2){
  OutPca <- x
  dfxy <- (OutPca$li[, c(xax, yax)])
  plot(dfxy, asp=1)}


#c OutCoe
# boxpltoCoe
#hist

#pca
#hcontrib
#deprecate ellipse par
#manova
#meanshape
#clust
#discri

plot(botP)





