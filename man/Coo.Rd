% Generated by roxygen2 (4.0.2): do not edit by hand
\name{Coo}
\alias{Coo}
\title{Coo class}
\usage{
Coo(...)
}
\arguments{
\item{...}{anything and, anyway, this function will simply returns a message.}
}
\description{
\code{Coo} class is the 'parent' class of
\code{\link{Out}}, \code{\link{Opn}} and \code{\link{Ldk}} classes.
}
\details{
\code{Coo} class is the 'parent' class of the following 'child' classes \itemize{
\item \code{\link{Out}} for closed \bold{out}lines
\item \code{\link{Opn}} for \bold{op}e\bold{n} outlines
\item \code{\link{Ldk}} for configuration of \bold{l}an\bold{d}mar\bold{k}s
}

Since all 'child classes' of them handle $(x; y)$ coordinates among other generic methods,
but also all have their specificity, this architecture allow to recycle generic methods and
to use specific methods.

In other words, \code{\link{Out}}, \code{\link{Opn}} and \code{\link{Ldk}} classes
are all, primarily, \code{Coo} objects on which we define generic \emph{and}
specific methods. See their respective help pages for more help.

You can access all the methods available for \code{Coo} objects
with \code{methods(class=Coo)}.
}
\note{
If you used Momocs before version <0.9, and/or if you have read the JSS paper,
you are probably looking for \link{Out}. If you have "old" \code{Coo} files, e.g. saved as \code{.rda} files,
no worry, you can import them:
\enumerate{
\item load your file: \code{load("foo.rda")}
It may produce an error but the \code{.rda} has been loaded (see \code{ls()})
\item type: \code{foo2 <- Out(foo@coo, fac=foo@fac)},
same thing for the \code{@ldk} slot and others, if any.
}
}
\examples{
\dontrun{
# to see all methods for Coo objects.
methods(class='Coo')
# Let's take an Out example. But all methods shown here
# work on Ldk (try data(wings) ) and on Opn (try data(olea))
data(bot)
# Primarily a 'Coo' object, but also an 'Out'
class(bot)
inherits(bot, "Coo")
panel(bot)
stack(bot)
plot(bot)
# Getters (you can also use it to set data)
bot[1]
# access the different components
# $coo coordinates
head(bot$coo)
# $fac grouping factors
head(bot$fac)
# table
table(bot$fac)
# an internal view of an Out object
str(bot)
# subsetting
w <- subset(bot, type=='whisky') # if you dont like beer
b <- subset(bot, type=='beer')   # if you don't like whisky
w # an example of Momocs:::print.Out
b # same thing for beers
combine(b, w) # if, eventually, you want to mix them
length(bot) # the number of shapes
names(bot) # access all individual names
bot2 <- bot
names(bot2) <- paste0('newnames', 1:length(bot2)) # define new names
}
}

