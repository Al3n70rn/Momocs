% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mult-clust.R
\name{CLUST}
\alias{CLUST}
\alias{CLUST.Coe}
\alias{CLUST.PCA}
\title{Hierarchical clustering}
\usage{
CLUST(x, ...)

\method{CLUST}{Coe}(x, ...)

\method{CLUST}{PCA}(x, fac, layout = "fan", dist_method = "euclidean",
  hclust_method = "complete", mono = TRUE, abbreviate = NULL,
  tip_fac = NULL, ...)
}
\arguments{
\item{x}{a PCA object (Coe method deprecated so far)}

\item{...}{useless here}

\item{fac}{the id or column name in $fac to use for colors and mono. Note that
you can also pass a factor of length equal to the number of rows of x$x}

\item{layout}{to pass to ggtree, one of
"cladogram", "phylogram", "dendrogram", "radial", "unrooted", "fan" (by default)}

\item{dist_method}{to feed \link{dist}'s method argument, one of
"euclidean", "maximum", "manhattan", "canberra", "binary" or "minkowski".}

\item{hclust_method}{to feed \link{hclust}'s method argument, one of
"ward.D", "ward.D2", "single", "complete", "average", "mcquitty", "median" or "centroid".}

\item{mono}{logical whether to color branches according to their /fac mononophyly status}

\item{abbreviate}{numeric, if specified passed as minlength argument to \link{abbreviate}}

\item{tip_fac}{the id or column name in $fac to use as tip_labels rather than rownames. Note that
you can also pass a character (or a factor) with the same number of rows of x$x}
}
\value{
a ggplot object
}
\description{
Performs hierarchical clustering through \link{dist} and \link{hclust}. So far it is mainly
a wrapper around these two functions, plus plotting using \link{plot.phylo} from the
package ape. You need to have ggtree installed from GitHub (not yet released on CRAN).
}
\examples{
\dontrun{
data(bot)
bp <- PCA(efourier(bot, 10))
CLUST(bp)
CLUST(bp, layout="phylogram")
CLUST(bp, layout="cladogram")
CLUST(bp, layout="dendrogram")
CLUST(bp, layout="unrooted")
CLUST(bp, layout="radial")
CLUST(bp, "type")
CLUST(bp, 1, layout="cladogram", mono=FALSE) #no monophyly coloring

# styling with ggplot2 grammar
library(ggplot2)
CLUST(bp, 1) + scale_color_discrete(h=c(120, 240))

# tip_fac is useful !
data(olea)
op <- PCA(opoly(olea, 5))
CLUST(op, "var", tip_fac="var")

# on the fly fac and tip_fac
tip_fac2 <- interaction(op$fac$var, op$fac$domes)
CLUST(op, fac=tip_fac2, tip_fac=tip_fac2)
}

}

