% Generated by roxygen2 (4.0.2): do not edit by hand
\name{subset.Coo}
\alias{slice}
\alias{slice.Coe}
\alias{slice.Coo}
\alias{subset.Coe}
\alias{subset.Coo}
\title{Create subsets of Coo objects}
\usage{
\method{subset}{Coo}(x, subset, ...)

\method{subset}{Coe}(x, subset, ...)

slice(x, fac)

\method{slice}{Coo}(x, fac)

\method{slice}{Coe}(x, fac)
}
\arguments{
\item{x}{a \code{Coo} or a \link{Coe} object.}

\item{subset}{logical taken from the \code{$fac} slot, or indices. See examples.}

\item{...}{useless here but maintains consistence with the generic subset.}

\item{fac}{the colum name in \code{fac} to use to slice your \code{Coo} or \code{Coe}.}
}
\description{
Pretty useful in morphometrics. Imagine you have a \link{Coo} or a \link{Coe} object,
that combines several different \emph{groups}, whatever \emph{groups} are : species, views, etc.
You may be interested in doing separated analyses (even if you could combine them later), then this
function will ease the process. \code{subset} needs to be passed with a logical subset;
\code{slice} just needs the factor to use to make subsets. Not to be confunded with
the dplyr' slice verb. See the examples below.
}
\examples{
data(bot)
bot$fac
##### subset
# beers
subset(bot, type=='beer')
# whiskys
subset(bot, type=='whisky')
# or you may prefere indices
subset(bot, c(1, 13, 34, 37))
##### and you can combine them :
data(olea)
olea$fac
subset(olea, domes=='cult' & view=='VL')
##### slice
slice(bot, "type")
bp <- efourier(bot, 10)
slice(bp, type)
slice(olea, domes)
}

