% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/cl-handling.R
\name{combine}
\alias{combine}
\alias{combine.Ldk}
\alias{combine.Opn}
\alias{combine.OpnCoe}
\alias{combine.Out}
\alias{combine.OutCoe}
\alias{combine.list}
\title{Combine Coo/Coe objects}
\usage{
combine(...)

\method{combine}{list}(...)

\method{combine}{Out}(...)

\method{combine}{Opn}(...)

\method{combine}{Ldk}(...)

\method{combine}{OutCoe}(...)

\method{combine}{OpnCoe}(...)
}
\arguments{
\item{...}{a list of Out(Coe), Opn(Coe), Ldk objects (but of the same class)}
}
\description{
Combine \code{Coo} objects after a slicing, either manual or using \link{slice} or \link{chop}. Note that on Coo object,
it combines row-wise (ie, merges shapes as a \code{c} would do) ; but on Coe it combines column-wise
(merges coefficients). In the latter case, Coe must have the same number of shapes (not
necessarily the same number of coefficients).
Also the $fac of the first Coe is retrieved.
A separate version may come at some point.
}
\note{
Note that the order of shapes or their coefficients
is not checked, so anything with the same number of rows will be merged.
}
\examples{
data(bot)
w <- filter(bot, type=="whisky")
b <- filter(bot, type=="beer")
combine(w, b)
# or, if you have many levels
bot_s <- chop(bot, type)
bot_s$whisky
# note that you can apply something (single function or a more
# complex pipe) then combine everyone, since combine also works on lists
# eg:
# bot_s2 <- lapply(bot_s, efourier, 10)
# bot_sf <- combine(bot_s2)

# pipe style
# library(magrittr)
# bot_sf <- lapply(bot_s, efourier, 10) \%>\% combine()
}
\seealso{
\link{select}, \link{filter}, \link{slice}, \link{chop}, \link{combine}.
}

