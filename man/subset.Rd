% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/cl-handling.R
\name{subset.Coo}
\alias{slice.PCA}
\alias{subset.Coe}
\alias{subset.Coo}
\alias{subset.PCA}
\title{Create subsets of Coo objects}
\usage{
\method{subset}{Coo}(x, subset, ...)

\method{subset}{Coe}(x, subset, ...)

\method{subset}{PCA}(x, subset, ...)

\method{slice}{PCA}(.data, ...)
}
\arguments{
\item{x}{a \code{Coo} or a \link{Coe} object.}

\item{subset}{logical taken from the \code{$fac} slot, or indices. See examples.}

\item{...}{useless here but maintains consistence with the generic subset.}

\item{.data}{same}
}
\description{
Subset is a wrapper around dplyr's verbs and should not be used directly.
Use \link{slice}, \link{filter}, \link{chop} and \link{select} instead.
}
\details{
\itemize{
\item \strong{rename} is used to rename columns from the $fac
\item \strong{mutate} is used to add new columns to the $fac
\item \strong{select} is used to select columns from the $fac
\item \strong{slice} is used to select shapes based on their ids
\item \strong{chop} is a rougher slicing that accept a column of the $fac and return a list of Coo/Coe objects
\item \strong{filter} is used to create subset based on logical values taken from the $fac
\item \strong{combine} not a dplyr verb but useful to combine after a subsetting
}
}
\examples{
# Do not use subset directly
}
\seealso{
\link{select}, \link{filter}, \link{slice}, \link{chop}, \link{combine}.
}

